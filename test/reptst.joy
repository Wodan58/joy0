(*
    module  : reptst.joy
    version : 1.1
    date    : 06/28/22
*)
DEFINE
enconcat == swapd cons concat;
dureco == dup rest cons;
duco == dup cons;
fix == [duco] swoncat duco;
deposit == [dup [first] dip] swoncat;
durereco == dup rest rest cons;
fix-i == [dip cons dureco] cons [uncons] swoncat cons swoncat dureco;
fix-a == [] [[cons] unary] fix-i;
fix-c == [0 [succ] infra dureco] swoncat dureco;
inter == [dip cons dureco] cons [uncons] swoncat cons dureco;
_expand == swap [dip] cons concat [dip] swoncat cons [[dip] cons
           [[pop] swoncat] dip	(* comment *)] dip [ifte] cons cons cons;
_binary == [dip swap i] _expand;
count == [0 [succ] infra] swoncat;
exe-t == [dip dureco] cons [[pred] infra] swoncat [ifte] cons
         [pop [[duco] duco]] swons [dup first null] swons cons dureco;
f-stream-prepare == swap [dip] cons concat cons [dup] infra dup rest rest infra
                    uncons uncons [pop dup] swoncat [infra durereco] cons;
linear == [i] _expand;
n-stream == [infra dureco] cons cons dureco;
n-stream-d == [infra dureco] cons deposit cons dureco;
c-stream == [dureco] cons dureco;
c-stream-d == [dureco] deposit cons dureco;
exe == [dip duco] cons duco;
exe-c == [dip dureco] cons count dureco;
f-stream == f-stream-prepare cons cons durereco;
f-stream-d == f-stream-prepare deposit cons cons durereco;
ints == [dureco] count dureco;
self == [duco] duco;
putchars == [putch] step;
nl == '\n putch;
space == 32 putch;
trace == "trace: " putchars state put nl;
trace2 == "trace: " putchars state put nl;
times10-c == [10 *] exe-c;
swoncat == swap concat;
steps == "steps: " putchars state;
state == first first;
squaring == [dup *] exe;
selfr == self;
qtest == qsort-fix-c i state;
qsort-fix-c == qsort-bin fix-c;
qsort-bin == [small] [] [uncons [>] split] [enconcat] _binary;
primes-d == 2 [succ [prime not] [succ] while] n-stream-d;
prime == 2 [[dup * >] nullary [rem 0 >] dip and] [succ] while dup * <;
ones-d == 1 c-stream-d;
ones == 1 c-stream;
nfib-fix-c == nfib fix-c;
nfib-fix-a == nfib fix-a;
nfib-fix == nfib-bin fix;
nfib-bin == [small] [pop 1] [pred dup pred] [+] _binary;
nfib == [[pop small] [[pop 1] dip] [[pred dup pred] dip dip swap i [+] dip]
        ifte];
max-4-adds == 4 [+] exe-t;
max-3-adds == 3 [+] exe-t;
length-lin == [null] [pop 0] [rest] [succ] linear;
length-fix-a == length-lin fix-a;
integers-from == [succ] n-stream;
integers == ints;
halving-d == 10 [20 /] n-stream-d;
halving == 10 [20 /] n-stream;
fact0 == [[pop null] [pop pop 1] [[dup pred] dip i *] ifte];
fact-lin == [null] [pop 1] [dup pred] [*] linear;
fact-fix-c == fact fix-c;
fact-fix-a == fact fix-a;
fact-fix == fact-lin fix;
fact == [[pop null] [[pop 1] dip] [[dup pred] dip i [*] dip] ifte];
even-squares == 0 [2 +] [dup *] f-stream;
c == concat;
accu-sum == 0 [+] inter;
accu-product-list == [] [[*] dip cons] inter;
accu-list == [] [cons] inter.

0 __settracegc.
selfr.
selfr i i i.
squaring.
2 squaring i pop.
2 squaring i i pop.
2 squaring i i i pop.
integers.
integers i i i i i state.
integers i i i i i i.
times10-c.
3 times10-c i i i i i pop.
3 times10-c i i i i i popd state.
ones.
ones i i i i i.
ones i i i i i state.
halving.
halving i i i.
halving i i i state.
42 integers-from.
42 integers-from i i i i i state.
ones-d.
ones-d i i i pop...
halving-d.
halving-d i i i i i pop.....
primes-d.
primes-d i i i i i pop.....
even-squares.
even-squares state.
even-squares i state.
even-squares i i state.
even-squares i i i state.
even-squares i i i i state.
1 2 3 4 5 accu-list i i i i i state. accu-sum.
1 2 3 4 5 accu-sum i i i i i state. accu-product-list.
1 10 2 100 3 1000 4 10000 accu-product-list i i i i state.
max-3-adds.
2 1 max-3-adds i pop.
3 2 1 max-3-adds i i pop.
4 3 2 1 max-3-adds i i i pop.
5 4 3 2 1 max-3-adds i i i i pop..
5 4 3 2 1 max-4-adds i i i i pop.
6 fact0 fix i.
6 fact fix i..
3 fact fix i i..
3 4 5 fact-fix i swap put space i swap put space i swap put nl pop.
3 4 5 fact-fix-c i swap put space i swap put space i swap put nl steps.
3 4 5 fact-fix-a i swap put space i swap put space i swap put nl trace.
nfib-fix.
6 nfib-fix i pop.
6 nfib-fix-c i swap put nl steps.
6 nfib-fix-a i swap put nl trace.
4 fact-fix i pop put nl.
[2 5 3 7 6] [a b c] length-fix-a i swap put i swap put nl trace2.
6 nfib-fix i pop put nl.
6 nfib-bin [] [[dup put space] dip] fix-i i nl pop put. nl.
[5 10 9 14 7 18 1 4 15 3 20 19 8 11 2 6 12 13 16 17] qtest..
[10 5 3 2 4 1 8 7 9 6 15 13 12 14 11 18 17 19 16 20] qtest..
[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20] qtest..
[20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1] qtest..
"You can also sort strings, of course" qtest..
